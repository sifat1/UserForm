@model List<UserForm.ViewModels.FormManage.FormCardViewModel>

<div class="container my-4">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var form in Model)
        {
            var shortDesc = string.IsNullOrEmpty(form.Description)
                ? ""
                : form.Description.Length > 100
                    ? form.Description.Substring(0, 100) + "..."
                    : form.Description;

            <div class="col">
                <div class="card h-100 shadow-sm border-1">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <h5 class="card-title text-primary">@form.FormTitle</h5>
                            <p class="mb-1 text-muted">
                                <i class="bi bi-tag"></i>
                                <strong>Topic:</strong> @form.FormTopic
                            </p>

                            @if (!string.IsNullOrEmpty(form.Description))
                            {
                                <p class="card-text small text-secondary" title="@form.Description">
                                    <i class="bi bi-info-circle"></i> @shortDesc
                                </p>
                            }

                            @if (form.IsPublic)
                            {
                                <span class="badge bg-success mb-2">Public</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary mb-2">Private</span>
                            }
                        </div>

                        <div class="d-flex flex-wrap gap-2 mt-3">
                            <form method="post" action="@Url.Action("Like", "FormManage")" class="me-2">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="formId" value="@form.Id" />
                                <input type="hidden" name="returnUrl" value="@($"{Context.Request.Path}{Context.Request.QueryString}")" />
                                <button type="submit" class="btn btn-outline-danger btn-sm">
                                    <i class="bi bi-heart-fill"></i> Like (@form.LikeCount)
                                </button>
                            </form>

                            @if (form.IsPublic)
                            {
                                <a class="btn btn-outline-primary btn-sm"
                                   href="@Url.Action("CreateFromTemplate", "Forms", new { id = form.Id })">
                                    <i class="bi bi-files"></i> Use as Template
                                </a>
                            }
                            @if (User.Identity.IsAuthenticated)
                            {
                            <a class="btn btn-outline-success btn-sm"
                               href="@Url.Action("Submit", "UserDatatoForms", new { id = form.Id })">
                                <i class="bi bi-pencil-square"></i> Fill Form
                            </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
